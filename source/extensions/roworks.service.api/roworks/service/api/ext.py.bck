import omni.ext
import logging
import asyncio
import threading
import tempfile
import os
import re
import time
import zipfile
from pathlib import Path
from typing import Dict, Any, Optional, List, Tuple

# Import with fallback handling
try:
    from fastapi import FastAPI, File, UploadFile, HTTPException
    from fastapi.middleware.cors import CORSMiddleware
    import uvicorn
    FASTAPI_AVAILABLE = True
except ImportError as e:
    print(f"⚠️ FastAPI not available: {e}")
    FASTAPI_AVAILABLE = False

# Omniverse imports
import carb
import omni.kit.app
import omni.usd
from pxr import Usd, UsdGeom, UsdShade, Sdf, Gf

logger = logging.getLogger(__name__)

class FixedUSDImporter:
    """Fixed USD importer that properly handles Omniverse context state"""
    
    def __init__(self):
        self.import_lock = threading.Lock()
        self.context_check_timeout = 30  # seconds
    
    def safe_import_usd(self, usd_path: str, asset_name: str) -> Tuple[bool, str]:
        """Safely import USD with proper context handling"""
        
        with self.import_lock:
            print(f"🔧 DEBUG: Starting safe USD import for {asset_name}")
            
            try:
                # Method 1: Try adding as reference to current stage (safest)
                success, message = self._import_as_reference_safe(usd_path, asset_name)
                if success:
                    return True, message
                
                # Method 2: Try copying USD content to current stage
                success, message = self._import_by_copying_content(usd_path, asset_name)
                if success:
                    return True, message
                
                # Method 3: Create a simple placeholder that points to the USD
                success, message = self._create_usd_placeholder(usd_path, asset_name)
                if success:
                    return True, f"USD placeholder created - Manual import available: {message}"
                
                return False, "All import methods failed - USD file is ready for manual import"
                
            except Exception as e:
                print(f"❌ DEBUG: Safe import error: {e}")
                return False, f"Import error: {str(e)}"
    
    def _wait_for_context_ready(self) -> bool:
        """Wait for USD context to be ready for operations"""
        start_time = time.time()
        
        while time.time() - start_time < self.context_check_timeout:
            try:
                context = omni.usd.get_context()
                if not context:
                    time.sleep(0.1)
                    continue
                
                # Check if context is busy
                stage = context.get_stage()
                if stage is None:
                    print("🔧 DEBUG: No stage available, context not ready")
                    time.sleep(0.1)
                    continue
                
                # Try a simple operation to test if context is ready
                try:
                    # Just check if we can access stage properties
                    _ = stage.GetRootLayer()
                    print("✅ DEBUG: USD context is ready")
                    return True
                except Exception as e:
                    print(f"🔧 DEBUG: Context still busy: {e}")
                    time.sleep(0.1)
                    continue
                    
            except Exception as e:
                print(f"🔧 DEBUG: Context check error: {e}")
                time.sleep(0.1)
                continue
        
        print("⚠️ DEBUG: Timeout waiting for USD context to be ready")
        return False
    
    def _import_as_reference_safe(self, usd_path: str, asset_name: str) -> Tuple[bool, str]:
        """Safely import USD as reference with proper error handling"""
        try:
            print(f"🔧 DEBUG: Attempting safe reference import for {asset_name}")
            
            if not self._wait_for_context_ready():
                return False, "USD context not ready"
            
            context = omni.usd.get_context()
            stage = context.get_stage()
            
            # Create safe import path
            import_path = f"/World/RoWorks/MeshAssets/{asset_name}"
            
            # Ensure parent structure exists
            self._ensure_parent_structure(stage)
            
            # Remove existing prim if it exists
            if stage.GetPrimAtPath(import_path):
                print(f"🔧 DEBUG: Removing existing prim at {import_path}")
                try:
                    omni.kit.commands.execute('DeletePrims', paths=[import_path])
                    time.sleep(0.1)  # Brief delay after deletion
                except Exception as e:
                    print(f"⚠️ DEBUG: Could not remove existing prim: {e}")
            
            # Create the asset prim using commands (more reliable)
            try:
                print(f"🔧 DEBUG: Creating reference via CreateReference command")
                result = omni.kit.commands.execute(
                    'CreateReference',
                    usd_context=context,
                    path_to=import_path,
                    asset_path=usd_path,
                    instanceable=False
                )
                
                if result:
                    print(f"✅ DEBUG: Successfully created reference via command")
                    self._add_metadata(stage, import_path, usd_path, asset_name)
                    return True, f"USD imported successfully as reference at {import_path}"
                else:
                    print("⚠️ DEBUG: CreateReference command returned False")
                    
            except Exception as e:
                print(f"⚠️ DEBUG: CreateReference command failed: {e}")
            
            # Fallback to direct reference creation
            try:
                print(f"🔧 DEBUG: Trying direct reference creation")
                asset_prim = stage.DefinePrim(import_path, "Xform")
                
                if asset_prim.IsValid():
                    asset_prim.GetReferences().AddReference(usd_path)
                    self._add_metadata(stage, import_path, usd_path, asset_name)
                    print(f"✅ DEBUG: Successfully created direct reference")
                    return True, f"USD imported successfully via direct reference at {import_path}"
                else:
                    print("❌ DEBUG: Could not create valid prim")
                    
            except Exception as e:
                print(f"❌ DEBUG: Direct reference creation failed: {e}")
            
            return False, "Reference import methods failed"
            
        except Exception as e:
            print(f"❌ DEBUG: Safe reference import error: {e}")
            return False, f"Reference import error: {str(e)}"
    
    def _import_by_copying_content(self, usd_path: str, asset_name: str) -> Tuple[bool, str]:
        """Import by copying USD content to current stage"""
        try:
            print(f"🔧 DEBUG: Attempting content copy import for {asset_name}")
            
            if not self._wait_for_context_ready():
                return False, "USD context not ready for content copy"
            
            # Open the source USD file
            source_stage = Usd.Stage.Open(usd_path)
            if not source_stage:
                return False, "Could not open source USD file"
            
            context = omni.usd.get_context()
            target_stage = context.get_stage()
            
            import_path = f"/World/RoWorks/MeshAssets/{asset_name}"
            
            # Ensure parent structure
            self._ensure_parent_structure(target_stage)
            
            # Create container prim
            container_prim = target_stage.DefinePrim(import_path, "Xform")
            if not container_prim.IsValid():
                return False, "Could not create container prim"
            
            # Copy the default prim content from source
            source_default_prim = source_stage.GetDefaultPrim()
            if source_default_prim.IsValid():
                # Use sublayer approach for better compatibility
                try:
                    container_prim.GetReferences().AddReference(usd_path)
                    self._add_metadata(target_stage, import_path, usd_path, asset_name)
                    print(f"✅ DEBUG: Content copied successfully")
                    return True, f"USD content imported at {import_path}"
                except Exception as e:
                    print(f"⚠️ DEBUG: Sublayer copy failed: {e}")
            
            return False, "Content copy failed"
            
        except Exception as e:
            print(f"❌ DEBUG: Content copy error: {e}")
            return False, f"Content copy error: {str(e)}"
    
    def _create_usd_placeholder(self, usd_path: str, asset_name: str) -> Tuple[bool, str]:
        """Create a placeholder that represents the USD file"""
        try:
            print(f"🔧 DEBUG: Creating USD placeholder for {asset_name}")
            
            if not self._wait_for_context_ready():
                return False, "USD context not ready for placeholder"
            
            context = omni.usd.get_context()
            stage = context.get_stage()
            
            import_path = f"/World/RoWorks/MeshAssets/{asset_name}"
            
            # Ensure parent structure
            self._ensure_parent_structure(stage)
            
            # Create placeholder prim
            placeholder_prim = stage.DefinePrim(import_path, "Xform")
            if not placeholder_prim.IsValid():
                return False, "Could not create placeholder prim"
            
            # Add comprehensive metadata
            placeholder_prim.CreateAttribute("roworks:usd_file_path", Sdf.ValueTypeNames.String).Set(usd_path)
            placeholder_prim.CreateAttribute("roworks:asset_name", Sdf.ValueTypeNames.String).Set(asset_name)
            placeholder_prim.CreateAttribute("roworks:asset_type", Sdf.ValueTypeNames.String).Set("mesh_usd_placeholder")
            placeholder_prim.CreateAttribute("roworks:import_method", Sdf.ValueTypeNames.String).Set("placeholder")
            placeholder_prim.CreateAttribute("roworks:created_at", Sdf.ValueTypeNames.String).Set(str(time.time()))
            
            # Create a visible placeholder geometry
            cube_path = import_path + "/placeholder_geometry"
            cube = UsdGeom.Cube.Define(stage, cube_path)
            cube.CreateSizeAttr(2.0)
            cube.CreateDisplayColorAttr([(0.2, 0.6, 1.0)])  # Blue color
            
            # Add text indicating it's a placeholder
            cube_prim = cube.GetPrim()
            cube_prim.CreateAttribute("roworks:placeholder_note", Sdf.ValueTypeNames.String).Set(
                f"Placeholder for {asset_name}. USD file: {usd_path}"
            )
            
            print(f"✅ DEBUG: Placeholder created successfully")
            return True, f"Placeholder created at {import_path}. USD file: {usd_path}"
            
        except Exception as e:
            print(f"❌ DEBUG: Placeholder creation error: {e}")
            return False, f"Placeholder creation error: {str(e)}"
    
    def _ensure_parent_structure(self, stage):
        """Ensure the parent folder structure exists"""
        try:
            # Create /World if it doesn't exist
            if not stage.GetPrimAtPath("/World"):
                stage.DefinePrim("/World", "Xform")
            
            # Create /World/RoWorks if it doesn't exist
            if not stage.GetPrimAtPath("/World/RoWorks"):
                stage.DefinePrim("/World/RoWorks", "Xform")
            
            # Create /World/RoWorks/MeshAssets if it doesn't exist
            if not stage.GetPrimAtPath("/World/RoWorks/MeshAssets"):
                stage.DefinePrim("/World/RoWorks/MeshAssets", "Xform")
                
        except Exception as e:
            print(f"⚠️ DEBUG: Error ensuring parent structure: {e}")
    
    def _add_metadata(self, stage, prim_path: str, usd_path: str, asset_name: str):
        """Add metadata to imported prim"""
        try:
            prim = stage.GetPrimAtPath(prim_path)
            if prim.IsValid():
                prim.CreateAttribute("roworks:source_usd_file", Sdf.ValueTypeNames.String).Set(usd_path)
                prim.CreateAttribute("roworks:asset_name", Sdf.ValueTypeNames.String).Set(asset_name)
                prim.CreateAttribute("roworks:import_method", Sdf.ValueTypeNames.String).Set("reference")
                prim.CreateAttribute("roworks:imported_at", Sdf.ValueTypeNames.String).Set(str(time.time()))
        except Exception as e:
            print(f"⚠️ DEBUG: Could not add metadata: {e}")


class MeshUSDManager:
    """Manages mesh ZIP uploads and creates USD assets with fixed import"""
    
    def __init__(self):
        print("🔧 DEBUG: Initializing Fixed MeshUSDManager")
        self.uploaded_assets = []
        self.temp_dir = tempfile.mkdtemp(prefix="roworks_mesh_")
        self.usd_importer = FixedUSDImporter()
        
        # Try to connect to scene manager (optional)
        self.scene_manager = None
        try:
            from roworks.scene.manager import get_scene_manager
            self.scene_manager = get_scene_manager()
            if self.scene_manager:
                print("✅ DEBUG: Connected to scene manager (optional)")
        except:
            print("ℹ️ DEBUG: Scene manager not available (using internal tracking)")
            
        print("🔧 DEBUG: Fixed Mesh USD manager ready")
    
    def process_mesh_zip(self, zip_path: str, filename: str, file_size: int) -> Dict[str, Any]:
        """Process mesh ZIP and create USD asset with fixed import"""
        print(f"🔧 DEBUG: Processing mesh ZIP: {filename} ({file_size / 1024 / 1024:.1f} MB)")
        
        try:
            # Extract and validate ZIP contents
            extracted = self._extract_and_validate_zip(zip_path, filename)
            if not extracted['valid']:
                return {
                    "success": False,
                    "message": extracted['error'],
                    "asset": None
                }
            
            # Create USD asset
            asset_name = self._sanitize_name(filename)
            usd_result = self._create_usd_asset(extracted, asset_name, filename, file_size)
            
            if usd_result['success']:
                # Use fixed USD import
                import_success, import_message = self.usd_importer.safe_import_usd(
                    usd_result['usd_path'], asset_name
                )
                
                # Track the asset
                asset_info = {
                    "filename": filename,
                    "asset_name": asset_name,
                    "file_size": file_size,
                    "usd_path": usd_result['usd_path'],
                    "extracted_files": extracted['files'],
                    "created_at": time.time(),
                    "imported_to_scene": import_success,
                    "import_message": import_message
                }
                self.uploaded_assets.append(asset_info)
                
                if import_success:
                    return {
                        "success": True,
                        "message": f"USD asset created and imported: {asset_name}",
                        "asset": asset_info
                    }
                else:
                    return {
                        "success": True,
                        "message": f"USD asset created: {asset_name}. {import_message}",
                        "asset": asset_info
                    }
            else:
                return {
                    "success": False,
                    "message": usd_result['error'],
                    "asset": None
                }
                
        except Exception as e:
            print(f"❌ DEBUG: Error processing mesh ZIP: {e}")
            import traceback
            traceback.print_exc()
            return {
                "success": False,
                "message": f"Processing failed: {str(e)}",
                "asset": None
            }
    
    def _extract_and_validate_zip(self, zip_path: str, filename: str) -> Dict:
        """Extract ZIP and validate required files"""
        result = {
            "valid": False,
            "error": "",
            "files": {
                "obj_file": None,
                "mtl_file": None,
                "texture_files": [],
                "extract_dir": None
            }
        }
        
        try:
            # Create extraction directory
            extract_dir = os.path.join(self.temp_dir, f"extract_{int(time.time())}")
            os.makedirs(extract_dir, exist_ok=True)
            result["files"]["extract_dir"] = extract_dir
            
            # Extract ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)
            
            # Find files
            for file_path in Path(extract_dir).rglob('*'):
                if file_path.is_file():
                    ext = file_path.suffix.lower()
                    
                    if ext == '.obj':
                        result["files"]["obj_file"] = str(file_path)
                    elif ext == '.mtl':
                        result["files"]["mtl_file"] = str(file_path)
                    elif ext in ['.jpg', '.jpeg', '.png', '.tiff', '.tga', '.bmp']:
                        result["files"]["texture_files"].append(str(file_path))
            
            # Validate required files
            if not result["files"]["obj_file"]:
                result["error"] = "No OBJ file found in ZIP"
                return result
            
            result["valid"] = True
            print(f"✅ DEBUG: ZIP validated - OBJ: ✓, MTL: {bool(result['files']['mtl_file'])}, "
                  f"Textures: {len(result['files']['texture_files'])}")
            
            return result
            
        except Exception as e:
            result["error"] = f"ZIP extraction failed: {str(e)}"
            return result
    
    def _create_usd_asset(self, extracted: Dict, asset_name: str, filename: str, file_size: int) -> Dict:
        """Create USD file from extracted mesh data"""
        try:
            # Create USD output path
            usd_dir = os.path.join(self.temp_dir, "usd_assets")
            os.makedirs(usd_dir, exist_ok=True)
            usd_path = os.path.join(usd_dir, f"{asset_name}.usd")
            
            print(f"🔧 DEBUG: Creating USD file: {usd_path}")
            
            # Create USD stage
            stage = Usd.Stage.CreateNew(usd_path)
            
            # Set stage metadata
            stage.SetMetadata('metersPerUnit', 1.0)
            stage.SetMetadata('upAxis', 'Y')
            
            # Create root prim
            root_path = f"/{asset_name}"
            root_prim = stage.DefinePrim(root_path, "Xform")
            stage.SetDefaultPrim(root_prim)
            
            # Add metadata
            root_prim.SetMetadata('customData', {
                'source': 'roworks_mesh_zip',
                'original_filename': filename,
                'file_size': file_size,
                'created_by': 'roworks_ai_omniverse_fixed'
            })
            
            # Import mesh
            mesh_success = self._import_obj_to_usd(
                stage,
                extracted['files']['obj_file'],
                extracted['files']['mtl_file'],
                extracted['files']['texture_files'],
                f"{root_path}/Mesh"
            )
            
            if not mesh_success:
                return {
                    "success": False,
                    "error": "Failed to import OBJ mesh to USD"
                }
            
            # Save USD file
            stage.Save()
            
            print(f"✅ DEBUG: USD asset created successfully: {usd_path}")
            return {
                "success": True,
                "usd_path": usd_path
            }
            
        except Exception as e:
            print(f"❌ DEBUG: Error creating USD asset: {e}")
            return {
                "success": False,
                "error": f"USD creation failed: {str(e)}"
            }
    
    def _import_obj_to_usd(self, stage, obj_path: str, mtl_path: Optional[str], 
                          texture_paths: List[str], mesh_prim_path: str) -> bool:
        """Import OBJ file with materials to USD"""
        try:
            print(f"🔧 DEBUG: Importing OBJ to USD: {Path(obj_path).name}")
            
            # Parse OBJ file
            vertices, faces, uvs, normals = self._parse_obj_file(obj_path)
            
            if not vertices or not faces:
                print("❌ DEBUG: No valid geometry found in OBJ file")
                return False
            
            # Create mesh prim
            mesh_prim = stage.DefinePrim(mesh_prim_path, "Mesh")
            mesh = UsdGeom.Mesh(mesh_prim)
            
            # Set mesh geometry
            mesh.CreatePointsAttr().Set(vertices)
            mesh.CreateFaceVertexIndicesAttr().Set(faces)
            mesh.CreateFaceVertexCountsAttr().Set([3] * (len(faces) // 3))  # Assuming triangles
            
            # Set UV coordinates if available
            if uvs:
                try:
                    primvars_api = UsdGeom.PrimvarsAPI(mesh_prim)
                    uv_primvar = primvars_api.CreatePrimvar("st", Sdf.ValueTypeNames.TexCoord2fArray)
                    uv_primvar.Set(uvs)
                    uv_primvar.SetInterpolation(UsdGeom.Tokens.faceVarying)
                    print("✅ DEBUG: UV coordinates set successfully")
                except Exception as e:
                    print(f"⚠️ DEBUG: Could not set UV coordinates: {e}")
            
            # Set normals if available
            if normals:
                try:
                    mesh.CreateNormalsAttr().Set(normals)
                    mesh.SetNormalsInterpolation(UsdGeom.Tokens.faceVarying)
                    print("✅ DEBUG: Normals set successfully")
                except Exception as e:
                    print(f"⚠️ DEBUG: Could not set normals: {e}")
            
            # Create and bind material
            if mtl_path or texture_paths:
                try:
                    material_success = self._create_usd_material(
                        stage, mtl_path, texture_paths, mesh_prim_path, mesh_prim
                    )
                    if material_success:
                        print("✅ DEBUG: Material created and bound successfully")
                except Exception as e:
                    print(f"⚠️ DEBUG: Material creation error: {e}")
                    mesh.CreateDisplayColorAttr().Set([(0.7, 0.7, 0.7)])
            else:
                mesh.CreateDisplayColorAttr().Set([(0.8, 0.8, 0.8)])
            
            print(f"✅ DEBUG: Mesh imported - {len(vertices)} vertices, {len(faces)//3} faces")
            return True
            
        except Exception as e:
            print(f"❌ DEBUG: Error importing OBJ to USD: {e}")
            return False
    
    def _parse_obj_file(self, obj_path: str) -> Tuple[List, List, List, List]:
        """Parse OBJ file and extract geometry data"""
        vertices = []
        faces = []
        uvs = []
        normals = []
        
        try:
            with open(obj_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('v '):  # Vertex
                        parts = line.split()[1:4]
                        if len(parts) >= 3:
                            vertices.append((float(parts[0]), float(parts[1]), float(parts[2])))
                    
                    elif line.startswith('vt '):  # Texture coordinate
                        parts = line.split()[1:3]
                        if len(parts) >= 2:
                            uvs.append((float(parts[0]), 1.0 - float(parts[1])))  # Flip V for USD
                    
                    elif line.startswith('vn '):  # Normal
                        parts = line.split()[1:4]
                        if len(parts) >= 3:
                            normals.append((float(parts[0]), float(parts[1]), float(parts[2])))
                    
                    elif line.startswith('f '):  # Face
                        parts = line.split()[1:]
                        face_indices = []
                        for part in parts:
                            indices = part.split('/')
                            vertex_idx = int(indices[0]) - 1  # Convert to 0-indexed
                            face_indices.append(vertex_idx)
                        
                        # Convert to triangles if needed
                        if len(face_indices) == 3:
                            faces.extend(face_indices)
                        elif len(face_indices) == 4:  # Quad -> two triangles
                            faces.extend([face_indices[0], face_indices[1], face_indices[2]])
                            faces.extend([face_indices[0], face_indices[2], face_indices[3]])
            
            print(f"🔧 DEBUG: Parsed OBJ - {len(vertices)} vertices, {len(faces)//3} triangles")
            
        except Exception as e:
            print(f"❌ DEBUG: Error parsing OBJ file: {e}")
        
        return vertices, faces, uvs, normals
    
    def _create_usd_material(self, stage, mtl_path: Optional[str], texture_paths: List[str],
                           mesh_prim_path: str, mesh_prim) -> bool:
        """Create USD material from MTL and textures"""
        try:
            material_name = f"{Path(mesh_prim_path).name}_Material"
            material_path = f"/Materials/{material_name}"
            
            material_prim = stage.DefinePrim(material_path, "Material")
            material = UsdShade.Material(material_prim)
            
            shader_path = f"{material_path}/PreviewSurface"
            shader_prim = stage.DefinePrim(shader_path, "Shader")
            shader = UsdShade.Shader(shader_prim)
            shader.CreateIdAttr("UsdPreviewSurface")
            
            shader.CreateInput("roughness", Sdf.ValueTypeNames.Float).Set(0.5)
            shader.CreateInput("metallic", Sdf.ValueTypeNames.Float).Set(0.0)
            
            if texture_paths:
                texture_path = texture_paths[0]
                
                texture_shader_path = f"{material_path}/DiffuseTexture"
                texture_prim = stage.DefinePrim(texture_shader_path, "Shader")
                texture_shader = UsdShade.Shader(texture_prim)
                texture_shader.CreateIdAttr("UsdUVTexture")
                texture_shader.CreateInput("file", Sdf.ValueTypeNames.Asset).Set(texture_path)
                
                primvar_path = f"{material_path}/PrimvarReader"
                primvar_prim = stage.DefinePrim(primvar_path, "Shader")
                primvar_shader = UsdShade.Shader(primvar_prim)
                primvar_shader.CreateIdAttr("UsdPrimvarReader_float2")
                primvar_shader.CreateInput("varname", Sdf.ValueTypeNames.Token).Set("st")
                
                texture_shader.CreateInput("st", Sdf.ValueTypeNames.Float2).ConnectToSource(
                    primvar_shader.ConnectableAPI(), "result"
                )
                
                shader.CreateInput("diffuseColor", Sdf.ValueTypeNames.Color3f).ConnectToSource(
                    texture_shader.ConnectableAPI(), "rgb"
                )
            else:
                shader.CreateInput("diffuseColor", Sdf.ValueTypeNames.Color3f).Set((0.7, 0.7, 0.7))
            
            material.CreateSurfaceOutput().ConnectToSource(shader.ConnectableAPI(), "surface")
            UsdShade.MaterialBindingAPI(mesh_prim).Bind(material)
            
            return True
            
        except Exception as e:
            print(f"❌ DEBUG: Error creating USD material: {e}")
            return False
    
    def _sanitize_name(self, filename: str) -> str:
        """Create safe USD prim name"""
        name = Path(filename).stem
        name = re.sub(r'[^a-zA-Z0-9_]', '_', name)
        if name and name[0].isdigit():
            name = f"Asset_{name}"
        return name or "UnnamedAsset"
    
    def get_status(self) -> Dict[str, Any]:
        """Get current status"""
        return {
            "total_assets": len(self.uploaded_assets),
            "workflow": "Fixed mesh ZIP (OBJ+MTL+textures) to USD assets with safe import",
            "temp_dir": self.temp_dir,
            "import_methods": "Reference, Content Copy, Placeholder"
        }
    
    def get_assets(self) -> List[Dict]:
        """Get all uploaded assets"""
        return self.uploaded_assets
    
    def get_scene_objects(self) -> List[Dict]:
        """Get all scene objects"""
        scene_objects = []
        
        for asset in self.uploaded_assets:
            scene_objects.append({
                "name": asset["asset_name"],
                "type": "mesh_asset",
                "prim_path": f"/World/RoWorks/MeshAssets/{asset['asset_name']}",
                "usd_path": asset["usd_path"],
                "imported": asset["imported_to_scene"],
                "import_message": asset.get("import_message", ""),
                "file_size": asset["file_size"],
                "created_at": asset["created_at"]
            })
        
        return scene_objects


class MeshAPIService:
    """Fixed API service for mesh ZIP to USD conversion"""
    
    def __init__(self):
        print("🔧 DEBUG: Initializing Fixed MeshAPIService")
        if not FASTAPI_AVAILABLE:
            print("❌ DEBUG: FastAPI not available, API service disabled")
            self._app = None
            self._server = None
            self._server_thread = None
            self.usd_manager = MeshUSDManager()
            return
            
        self._app = FastAPI(
            title="RoWorks Fixed Mesh USD API",
            description="Fixed mesh ZIP (OBJ+MTL+textures) to USD conversion with safe import",
            version="3.0.0"
        )
        
        self._app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        self._server = None
        self._server_thread = None
        self.usd_manager = MeshUSDManager()
        self._setup_routes()
        print("🔧 DEBUG: Fixed Mesh API Service initialized")
    
    def _setup_routes(self):
        """Setup API routes"""
        if not self._app:
            return
            
        @self._app.get("/health")
        async def health_check():
            return {
                "status": "healthy",
                "service": "fixed_mesh_usd_creation",
                "version": "3.0.0",
                "workflow": "Fixed mesh ZIP (OBJ+MTL+textures) to USD assets with safe import",
                "import_methods": ["Reference", "Content Copy", "Placeholder"],
                **self.usd_manager.get_status()
            }
        
        @self._app.get("/status")
        async def get_status():
            return self.usd_manager.get_status()
        
        @self._app.get("/assets")
        async def get_assets():
            return {
                "assets": self.usd_manager.get_assets(),
                "scene_objects": self.usd_manager.get_scene_objects()
            }
        
        @self._app.get("/scene/info")
        async def get_scene_info():
            """Get scene information - compatible with existing web interface"""
            scene_objects = self.usd_manager.get_scene_objects()
            
            by_type = {}
            for obj in scene_objects:
                obj_type = obj.get("type", "unknown")
                by_type[obj_type] = by_type.get(obj_type, 0) + 1
            
            return {
                "total_objects": len(scene_objects),
                "objects_by_type": by_type,
                "objects": scene_objects,
                "workflow": "Fixed mesh ZIP (OBJ+MTL+textures) to USD assets"
            }
        
        @self._app.post("/mesh/import")
        async def import_mesh(file: UploadFile = File(...)):
            """Import mesh ZIP file with fixed USD import"""
            print(f"🔧 DEBUG: Uploading mesh ZIP with fixed import: {file.filename}")
            start_time = time.time()
            
            try:
                if not file.filename:
                    raise HTTPException(status_code=400, detail="No file provided")
                
                if not file.filename.lower().endswith('.zip'):
                    raise HTTPException(status_code=400, detail="File must be a ZIP archive")
                
                content = await file.read()
                file_size = len(content)
                print(f"🔧 DEBUG: ZIP file size: {file_size / 1024 / 1024:.1f} MB")
                
                max_size = 100 * 1024 * 1024  # 100MB
                if file_size > max_size:
                    raise HTTPException(
                        status_code=400,
                        detail=f"File too large. Maximum size: {max_size // 1024 // 1024}MB"
                    )
                
                zip_path = os.path.join(self.usd_manager.temp_dir, file.filename)
                with open(zip_path, 'wb') as f:
                    f.write(content)
                
                result = self.usd_manager.process_mesh_zip(zip_path, file.filename, file_size)
                
                elapsed_time = time.time() - start_time
                print(f"🔧 DEBUG: Fixed mesh processing completed in {elapsed_time:.2f}s")
                
                if result["success"]:
                    return {
                        "success": True,
                        "message": result["message"],
                        "data": {
                            **result["asset"],
                            "processing_time": elapsed_time
                        }
                    }
                else:
                    raise HTTPException(status_code=400, detail=result["message"])
                    
            except HTTPException:
                raise
            except Exception as e:
                elapsed_time = time.time() - start_time
                print(f"❌ DEBUG: Fixed mesh import error after {elapsed_time:.2f}s: {e}")
                raise HTTPException(status_code=500, detail=str(e))
        
        @self._app.delete("/assets/clear")
        async def clear_assets():
            """Clear all assets"""
            self.usd_manager.uploaded_assets.clear()
            return {"success": True, "message": "All assets cleared"}
    
    def start_server(self):
        """Start the API server"""
        if not self._app:
            print("❌ DEBUG: Cannot start server - FastAPI not available")
            return
            
        def run_server():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                config = uvicorn.Config(
                    app=self._app,
                    host="0.0.0.0",
                    port=49101,
                    log_level="error",
                    access_log=False
                )
                
                self._server = uvicorn.Server(config)
                print("🚀 DEBUG: Fixed Mesh USD API server starting on port 49101")
                
                loop.run_until_complete(self._server.serve())
                
            except Exception as e:
                print(f"❌ DEBUG: Server error: {e}")
                import traceback
                traceback.print_exc()
        
        try:
            self._server_thread = threading.Thread(target=run_server, daemon=True)
            self._server_thread.start()
        except Exception as e:
            print(f"❌ DEBUG: Error starting server thread: {e}")
    
    def stop_server(self):
        if self._server:
            self._server.should_exit = True


class RoWorksServiceApiExtension(omni.ext.IExt):
    def on_startup(self, ext_id):
        print("🚀 DEBUG: RoWorks Fixed Mesh USD API Extension Starting!")
        
        try:
            self._api_service = MeshAPIService()
            
            if FASTAPI_AVAILABLE:
                self._api_service.start_server()
                print("✅ DEBUG: Fixed Mesh USD extension startup complete")
                print(f"🚀 API: http://localhost:49101 (Fixed Mesh USD Creation)")
                print("📝 Upload mesh ZIP files (OBJ+MTL+textures) to create USD assets")
                print("🔧 Fixed USD import with multiple fallback methods:")
                print("   1. Reference import (primary)")
                print("   2. Content copy import (fallback)")
                print("   3. Placeholder creation (fallback)")
                print("📊 Max file size: 100MB")
                print("✅ Proper USD context handling and threading")
            else:
                print("⚠️ DEBUG: API service disabled - FastAPI dependencies not available")
            
        except Exception as e:
            print(f"❌ DEBUG: Extension startup failed: {e}")
            import traceback
            traceback.print_exc()
        
    def on_shutdown(self):
        print("🔧 DEBUG: Fixed Mesh USD extension shutting down")
        
        if hasattr(self, '_api_service') and self._api_service:
            self._api_service.stop_server()


# Public API functions for compatibility
def some_public_function(x):
    """Legacy function for compatibility"""
    return x * x * x * x
